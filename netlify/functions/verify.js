// File: netlify/functions/verify.js

// fetch ƒë√£ c√≥ s·∫µn trong m√¥i tr∆∞·ªùng Netlify Functions (Node.js 18+),
// v√¨ v·∫≠y kh√¥ng c·∫ßn import 'node-fetch'.
import { getStore } from "@netlify/blobs";

// T√™n c·ªßa Blob Store ƒë·ªÉ l∆∞u c·∫•u h√¨nh QR
const STORE_NAME = "qr-settings";

// C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
const DEFAULT_EXPIRATION_HOURS = 12;
const DEFAULT_TARGET_URL = "https://nuibaden.netlify.app/pages/climb.html"; // ƒê·∫£m b·∫£o URL n√†y ch√≠nh x√°c

// Fallback settings khi kh√¥ng th·ªÉ k·∫øt n·ªëi Blobs
const FALLBACK_SETTINGS = {
  expirationHours: DEFAULT_EXPIRATION_HOURS,
  targetUrl: DEFAULT_TARGET_URL
};

export const handler = async function(event, context) {
  try {
    // Debug: Log event details
    console.log('Event path:', event.path);
    console.log('Event rawPath:', event.rawPath);
    console.log('Event pathParameters:', event.pathParameters);
    console.log('Event queryStringParameters:', event.queryStringParameters);
    console.log('Event headers:', event.headers);
    
    // Check if we're in a development environment
    const isDevelopment = process.env.NODE_ENV !== 'production';
    console.log('Environment check:', { NODE_ENV: process.env.NODE_ENV, isDevelopment });

    // L·∫•y c·∫•u h√¨nh t·ª´ Netlify Blobs (v·ªõi fallback)
    let settings;
    
    // Ki·ªÉm tra xem c√≥ n√™n th·ª≠ k·∫øt n·ªëi Blobs kh√¥ng
    // Tr√™n Netlify production, lu√¥n th·ª≠ k·∫øt n·ªëi Blobs ƒë·ªÉ l·∫•y c·∫•u h√¨nh t·ª´ admin
    const shouldTryBlobs = process.env.NETLIFY_BLOBS_CONTEXT === 'true';
    console.log('Should try Blobs:', shouldTryBlobs);
    
    if (shouldTryBlobs) {
      try {
        console.log('ƒêang th·ª≠ k·∫øt n·ªëi v·ªõi Netlify Blobs Store:', STORE_NAME);
        console.log('Environment variables:', {
          NETLIFY_BLOBS_CONTEXT: process.env.NETLIFY_BLOBS_CONTEXT,
          NODE_ENV: process.env.NODE_ENV,
          SITE_ID: process.env.SITE_ID
        });
        
        const store = getStore(STORE_NAME);
        console.log('ƒê√£ t·∫°o store th√†nh c√¥ng, ƒëang t·∫£i c·∫•u h√¨nh...');
        
        // T·∫£i c·∫•u h√¨nh d∆∞·ªõi d·∫°ng JSON, n·∫øu kh√¥ng c√≥ s·∫Ω tr·∫£ v·ªÅ null
        const settingsData = await store.get("settings", { type: "json" });
        console.log('D·ªØ li·ªáu c·∫•u h√¨nh t·ª´ Blob Store:', settingsData);
        
        settings = settingsData || FALLBACK_SETTINGS;
      } catch (blobError) {
        console.error("L·ªói khi l·∫•y c·∫•u h√¨nh t·ª´ Blob Store:", blobError);
        console.log("Chi ti·∫øt l·ªói:", {
          name: blobError.name,
          message: blobError.message,
          stack: blobError.stack
        });
        console.log("S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh");
        // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
        settings = FALLBACK_SETTINGS;
      }
    } else {
      console.log('B·ªè qua Blobs, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh');
      settings = FALLBACK_SETTINGS;
    }
    
    // Th√™m logging ƒë·ªÉ debug c·∫•u h√¨nh cu·ªëi c√πng
    console.log('C·∫•u h√¨nh QR cu·ªëi c√πng s·∫Ω s·ª≠ d·ª•ng:', {
      expirationHours: settings.expirationHours,
      targetUrl: settings.targetUrl,
      source: shouldTryBlobs ? 'Blobs' : 'Fallback'
    });

    console.log('S·ª≠ d·ª•ng c·∫•u h√¨nh QR:', settings);

    // --- LOGIC L·∫§Y M√É H√ìA ƒê√É ƒê∆Ø·ª¢C S·ª¨A L·∫†I ---
    // Logic c≈© kh√° ph·ª©c t·∫°p. D·ª±a tr√™n log, ƒë∆∞·ªùng d·∫´n request lu√¥n c√≥ d·∫°ng
    // `/v/CHUOI_MA_HOA`. Logic ƒë∆°n gi·∫£n h√≥a n√†y s·∫Ω ·ªïn ƒë·ªãnh h∆°n v√†
    // tr√≠ch xu·∫•t m√£ m·ªôt c√°ch tr·ª±c ti·∫øp.
    let encodedTime = '';
    const path = event.path;

    if (path && path.startsWith('/v/')) {
      // L·∫•y ph·∫ßn chu·ªói n·∫±m sau '/v/'
      encodedTime = path.substring(3);
    }

    console.log('=== DEBUG PARSING ENCODED TIME ===');
    console.log('Path:', path);
    console.log('Encoded time:', encodedTime);
    console.log('=== END DEBUG PARSING ===');

    // Ki·ªÉm tra xem ƒë√£ l·∫•y ƒë∆∞·ª£c m√£ h√≥a hay ch∆∞a
    if (!encodedTime) {
      return {
        statusCode: 400,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
          'URL kh√¥ng h·ª£p l·ªá',
          'Vui l√≤ng s·ª≠ d·ª•ng ƒë√∫ng ƒë∆∞·ªùng d·∫´n QR code ƒë∆∞·ª£c t·∫°o t·ª´ h·ªá th·ªëng.',
          '‚ö†Ô∏è'
        ),
      };
    }

    // Ki·ªÉm tra ƒë·ªô d√†i v√† format c·ªßa encodedTime
    if (encodedTime.length < 10 || encodedTime.length > 50) {
      console.log('Encoded time length invalid:', encodedTime.length);
      return {
        statusCode: 400,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
          'M√£ QR kh√¥ng h·ª£p l·ªá',
          'M√£ QR n√†y c√≥ ƒë·ªô d√†i kh√¥ng ƒë√∫ng. Vui l√≤ng qu√©t l·∫°i m√£ QR ch√≠nh x√°c.',
          'üîó'
        ),
      };
    }

    // Ki·ªÉm tra format base64 h·ª£p l·ªá
    const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
    if (!base64Regex.test(encodedTime)) {
      console.log('Invalid base64 format:', encodedTime);
      return {
        statusCode: 400,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
          'M√£ QR kh√¥ng h·ª£p l·ªá',
          'M√£ QR n√†y c√≥ ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng. Vui l√≤ng qu√©t l·∫°i m√£ QR ch√≠nh x√°c.',
          'üîó'
        ),
      };
    }

    // Gi·∫£i m√£ chu·ªói base64 ƒë·ªÉ l·∫•y timestamp g·ªëc
    let creationTime;
    try {
      const decodedString = Buffer.from(encodedTime, 'base64').toString('utf8');
      creationTime = parseInt(decodedString, 10);
      if (isNaN(creationTime)) {
        // L·ªói s·∫Ω ƒë∆∞·ª£c b·∫Øt ·ªü kh·ªëi catch b√™n d∆∞·ªõi
        throw new Error('Timestamp sau khi gi·∫£i m√£ kh√¥ng ph·∫£i l√† m·ªôt con s·ªë.');
      }
    } catch (error) {
      console.error("L·ªói gi·∫£i m√£ Base64:", error);
      return {
        statusCode: 400,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
          'M√£ kh√¥ng h·ª£p l·ªá',
          'M√£ QR n√†y kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã h·ªèng. Vui l√≤ng qu√©t l·∫°i m√£ QR m·ªõi.',
          'üîó'
        ),
      };
    }

    // Ki·ªÉm tra timestamp c√≥ h·ª£p l√Ω kh√¥ng
    const currentTime = Date.now();
    const minValidTime = currentTime - (365 * 24 * 60 * 60 * 1000); // 1 nƒÉm tr∆∞·ªõc
    const maxValidTime = currentTime + (24 * 60 * 60 * 1000); // 1 ng√†y sau

    if (creationTime < minValidTime || creationTime > maxValidTime) {
      console.log('Timestamp out of valid range:', {
        creationTime,
        currentTime,
        minValidTime,
        maxValidTime
      });
      return {
        statusCode: 400,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
          'M√£ QR kh√¥ng h·ª£p l·ªá',
          'M√£ QR n√†y c√≥ th·ªùi gian t·∫°o kh√¥ng h·ª£p l·ªá. Vui l√≤ng qu√©t l·∫°i m√£ QR ch√≠nh x√°c.',
          'üîó'
        ),
      };
    }

    // --- KI·ªÇM TRA H·∫æT H·∫†N ---
    const expirationTimeMs = settings.expirationHours * 60 * 60 * 1000;

    if (currentTime - creationTime > expirationTimeMs) {
      // N·∫øu ƒë√£ h·∫øt h·∫°n, tr·∫£ v·ªÅ trang l·ªói
      return {
        statusCode: 410, // 410 Gone
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
            'ƒê∆∞·ªùng d·∫´n ƒë√£ h·∫øt hi·ªáu l·ª±c',
            `URL n√†y ch·ªâ c√≥ gi√° tr·ªã trong ${settings.expirationHours} gi·ªù. Vui l√≤ng qu√©t l·∫°i m√£ QR ƒë·ªÉ t·∫°o ƒë∆∞·ªùng d·∫´n m·ªõi.`,
            '‚è∞'
        ),
      };
    }
    

    // N·∫øu h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n, t·∫£i n·ªôi dung c·ªßa trang ƒë√≠ch
    const targetUrl = settings.targetUrl;
    console.log('ƒêang t·∫£i trang ƒë√≠ch:', targetUrl);

    try {
      const response = await fetch(targetUrl);
      if (!response.ok) {
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i trang ƒë√≠ch. Status: ${response.status}`);
      }
      const pageContent = await response.text();
      
      // Tr·∫£ v·ªÅ n·ªôi dung c·ªßa trang ƒë√≠ch
      return {
        statusCode: 200,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: pageContent,
      };
    } catch (fetchError) {
      console.error('L·ªói khi t·∫£i trang ƒë√≠ch:', fetchError);
      return {
        statusCode: 500,
        headers: { "Content-Type": "text/html; charset=utf-8" },
        body: createErrorPage(
            'Kh√¥ng th·ªÉ t·∫£i trang',
            'ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i n·ªôi dung trang ƒë√≠ch. Vui l√≤ng th·ª≠ l·∫°i sau.',
            'üåê'
        ),
      };
    }

  } catch (error) {
    console.error('ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën:', error);
    return {
      statusCode: 500,
      headers: { "Content-Type": "text/html; charset=utf-8" },
      body: createErrorPage(
          'L·ªói M√°y Ch·ªß',
          'ƒê√£ c√≥ l·ªói ngo√†i √Ω mu·ªën x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
          '‚öôÔ∏è'
      ),
    };
  }
};

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ t·∫°o trang l·ªói HTML c√≥ giao di·ªán ƒë·∫πp.
 * @param {string} title - Ti√™u ƒë·ªÅ c·ªßa trang.
 * @param {string} message - Th√¥ng ƒëi·ªáp l·ªói.
 * @param {string} icon - Bi·ªÉu t∆∞·ª£ng emoji.
 * @returns {string} - Chu·ªói HTML c·ªßa trang l·ªói.
 */
function createErrorPage(title, message, icon) {
    return `
      <!DOCTYPE html>
      <html lang="vi">
        <head>
          <title>${title}</title>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              text-align: center;
              padding: 40px 20px;
              background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
              color: white;
              min-height: 100vh;
              margin: 0;
              display: flex;
              align-items: center;
              justify-content: center;
              box-sizing: border-box;
            }
            .container {
              max-width: 600px;
              background: rgba(255, 255, 255, 0.1);
              padding: 40px;
              border-radius: 20px;
              backdrop-filter: blur(10px);
              box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            }
            h1 {
              font-size: 2.2rem;
              margin-bottom: 20px;
            }
            p {
              font-size: 1.1rem;
              line-height: 1.6;
              margin-bottom: 30px;
              opacity: 0.9;
            }
            .icon {
              font-size: 4rem;
              margin-bottom: 20px;
            }
            .back-btn {
              display: inline-block;
              background: rgba(255, 255, 255, 0.2);
              color: white;
              padding: 12px 30px;
              text-decoration: none;
              border-radius: 25px;
              transition: all 0.3s ease;
              border: 2px solid rgba(255, 255, 255, 0.3);
              font-weight: 600;
            }
            .back-btn:hover {
              background: rgba(255, 255, 255, 0.3);
              transform: translateY(-2px);
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="icon">${icon}</div>
            <h1>${title}</h1>
            <p>${message}</p>
            <a href="/" class="back-btn">V·ªÅ trang ch·ªß</a>
          </div>
        </body>
      </html>
    `;
}
