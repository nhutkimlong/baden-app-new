// Weather Service for weather-based activity recommendations
export interface WeatherData {
  temperature: number;
  humidity: number;
  description: string;
  icon: string;
  windSpeed: number;
  visibility: number;
  uvIndex: number;
  condition: 'sunny' | 'cloudy' | 'rainy' | 'stormy' | 'foggy';
  timestamp: number;
}

export interface WeatherForecast {
  current: WeatherData;
  hourly: WeatherData[];
  daily: WeatherData[];
}

export interface ActivityRecommendation {
  activity: string;
  suitability: 'excellent' | 'good' | 'fair' | 'poor';
  reason: string;
  alternatives?: string[];
}

class WeatherService {
  private cache: Map<string, { data: WeatherData; timestamp: number }> = new Map();
  private readonly CACHE_DURATION = 10 * 60 * 1000; // 10 minutes
  private readonly BA_DEN_COORDS = { lat: 11.3746, lon: 106.1778 }; // N√∫i B√† ƒêen coordinates

  // Get current weather (mock implementation - in real app would use weather API)
  async getCurrentWeather(lat?: number, lon?: number): Promise<WeatherData> {
    const coords = lat && lon ? { lat, lon } : this.BA_DEN_COORDS;
    const cacheKey = `${coords.lat},${coords.lon}`;
    
    // Check cache first
    const cached = this.cache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {
      return cached.data;
    }

    // Mock weather data - in real implementation, call weather API
    const mockWeather = this.generateMockWeather();
    
    // Cache the result
    this.cache.set(cacheKey, {
      data: mockWeather,
      timestamp: Date.now()
    });

    return mockWeather;
  }

  // Get weather-based activity recommendations
  async getActivityRecommendations(weather?: WeatherData): Promise<ActivityRecommendation[]> {
    const currentWeather = weather || await this.getCurrentWeather();
    const recommendations: ActivityRecommendation[] = [];

    // Cable car recommendations
    if (currentWeather.condition === 'sunny' && currentWeather.visibility > 5) {
      recommendations.push({
        activity: 'ƒêi c√°p treo ng·∫Øm c·∫£nh',
        suitability: 'excellent',
        reason: 'Th·ªùi ti·∫øt ƒë·∫πp, t·∫ßm nh√¨n xa, l√Ω t∆∞·ªüng ƒë·ªÉ ng·∫Øm c·∫£nh t·ª´ tr√™n cao',
        alternatives: ['Ch·ª•p ·∫£nh panorama', 'Ng·∫Øm ho√†ng h√¥n']
      });
    } else if (currentWeather.condition === 'cloudy' && currentWeather.visibility > 3) {
      recommendations.push({
        activity: 'ƒêi c√°p treo ng·∫Øm c·∫£nh',
        suitability: 'good',
        reason: 'Th·ªùi ti·∫øt m√°t m·∫ª, ph√π h·ª£p ƒëi c√°p treo nh∆∞ng t·∫ßm nh√¨n c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø',
        alternatives: ['Tham quan ch√πa', 'Kh√°m ph√° hang ƒë·ªông']
      });
    } else if (currentWeather.condition === 'rainy') {
      recommendations.push({
        activity: 'ƒêi c√°p treo ng·∫Øm c·∫£nh',
        suitability: 'poor',
        reason: 'Tr·ªùi m∆∞a, t·∫ßm nh√¨n k√©m v√† c√≥ th·ªÉ nguy hi·ªÉm',
        alternatives: ['Tham quan b·∫£o t√†ng', 'Ngh·ªâ ng∆°i t·∫°i nh√† h√†ng']
      });
    }

    // Hiking recommendations
    if (currentWeather.temperature < 30 && currentWeather.condition !== 'rainy') {
      recommendations.push({
        activity: 'Leo n√∫i b·ªô',
        suitability: currentWeather.temperature < 25 ? 'excellent' : 'good',
        reason: currentWeather.temperature < 25 
          ? 'Nhi·ªát ƒë·ªô m√°t m·∫ª, l√Ω t∆∞·ªüng cho ho·∫°t ƒë·ªông leo n√∫i'
          : 'Nhi·ªát ƒë·ªô ·ªïn, ph√π h·ª£p leo n√∫i nh∆∞ng c·∫ßn mang n∆∞·ªõc',
        alternatives: ['ƒêi b·ªô ƒë∆∞·ªùng m√≤n', 'Kh√°m ph√° thi√™n nhi√™n']
      });
    } else if (currentWeather.temperature >= 30) {
      recommendations.push({
        activity: 'Leo n√∫i b·ªô',
        suitability: 'fair',
        reason: 'Nhi·ªát ƒë·ªô cao, n√™n leo n√∫i v√†o s√°ng s·ªõm ho·∫∑c chi·ªÅu m√°t',
        alternatives: ['Leo n√∫i s√°ng s·ªõm (5-7h)', 'Leo n√∫i chi·ªÅu m√°t (16-18h)']
      });
    }

    // Temple visiting recommendations
    if (currentWeather.condition !== 'stormy') {
      recommendations.push({
        activity: 'Tham quan ch√πa chi·ªÅn',
        suitability: currentWeather.condition === 'rainy' ? 'excellent' : 'good',
        reason: currentWeather.condition === 'rainy'
          ? 'Th·ªùi ti·∫øt m∆∞a, l√Ω t∆∞·ªüng ƒë·ªÉ tham quan c√°c khu v·ª±c c√≥ m√°i che'
          : 'Th·ªùi ti·∫øt ·ªïn ƒë·ªãnh, ph√π h·ª£p tham quan v√† chi√™m b√°i',
        alternatives: ['Thi·ªÅn ƒë·ªãnh', 'T√¨m hi·ªÉu l·ªãch s·ª≠']
      });
    }

    // Photography recommendations
    if (currentWeather.condition === 'sunny' || currentWeather.condition === 'cloudy') {
      recommendations.push({
        activity: 'Ch·ª•p ·∫£nh phong c·∫£nh',
        suitability: currentWeather.condition === 'cloudy' ? 'excellent' : 'good',
        reason: currentWeather.condition === 'cloudy'
          ? '√Ånh s√°ng m·ªÅm m·∫°i t·ª´ m√¢y che, l√Ω t∆∞·ªüng cho ch·ª•p ·∫£nh'
          : '√Ånh s√°ng t·ªët nh∆∞ng c√≥ th·ªÉ h∆°i g·∫Øt, n√™n ch·ª•p v√†o s√°ng s·ªõm ho·∫∑c chi·ªÅu',
        alternatives: ['Ch·ª•p ·∫£nh sunrise', 'Ch·ª•p ·∫£nh sunset', 'Ch·ª•p ·∫£nh macro']
      });
    }

    // Outdoor dining recommendations
    if (currentWeather.condition === 'sunny' && currentWeather.temperature < 32) {
      recommendations.push({
        activity: 'ƒÇn u·ªëng ngo√†i tr·ªùi',
        suitability: 'excellent',
        reason: 'Th·ªùi ti·∫øt ƒë·∫πp, nhi·ªát ƒë·ªô d·ªÖ ch·ªãu, l√Ω t∆∞·ªüng cho b·ªØa ƒÉn ngo√†i tr·ªùi',
        alternatives: ['Picnic', 'BBQ', 'Th∆∞·ªüng th·ª©c ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng']
      });
    } else if (currentWeather.condition === 'cloudy') {
      recommendations.push({
        activity: 'ƒÇn u·ªëng ngo√†i tr·ªùi',
        suitability: 'good',
        reason: 'Th·ªùi ti·∫øt m√°t m·∫ª, ph√π h·ª£p ƒÉn u·ªëng ngo√†i tr·ªùi',
        alternatives: ['Caf√© s√¢n v∆∞·ªùn', 'Nh√† h√†ng c√≥ kh√¥ng gian m·ªü']
      });
    }

    return recommendations.sort((a, b) => {
      const suitabilityOrder = { excellent: 4, good: 3, fair: 2, poor: 1 };
      return suitabilityOrder[b.suitability] - suitabilityOrder[a.suitability];
    });
  }

  // Get weather condition icon
  getWeatherIcon(condition: string): string {
    const icons: Record<string, string> = {
      sunny: '‚òÄÔ∏è',
      cloudy: '‚òÅÔ∏è',
      rainy: 'üåßÔ∏è',
      stormy: '‚õàÔ∏è',
      foggy: 'üå´Ô∏è'
    };
    return icons[condition] || 'üå§Ô∏è';
  }

  // Get weather-appropriate clothing suggestions
  getClothingSuggestions(weather: WeatherData): string[] {
    const suggestions: string[] = [];

    if (weather.temperature < 20) {
      suggestions.push('√Åo kho√°c nh·∫π', 'Qu·∫ßn d√†i');
    } else if (weather.temperature < 25) {
      suggestions.push('√Åo d√†i tay', 'Qu·∫ßn d√†i ho·∫∑c ng·∫Øn');
    } else if (weather.temperature < 30) {
      suggestions.push('√Åo ng·∫Øn tay', 'Qu·∫ßn ng·∫Øn');
    } else {
      suggestions.push('√Åo m·ªèng', 'Qu·∫ßn ng·∫Øn', 'N√≥n/m≈©');
    }

    if (weather.condition === 'rainy') {
      suggestions.push('√Åo m∆∞a', '√î', 'Gi√†y ch·ªëng tr∆∞·ª£t');
    }

    if (weather.condition === 'sunny' && weather.uvIndex > 6) {
      suggestions.push('Kem ch·ªëng n·∫Øng', 'K√≠nh r√¢m', 'N√≥n r·ªông v√†nh');
    }

    if (weather.humidity > 80) {
      suggestions.push('Qu·∫ßn √°o tho√°ng m√°t', 'KhƒÉn lau m·ªì h√¥i');
    }

    return suggestions;
  }

  // Check if weather is suitable for specific activity
  isWeatherSuitableFor(activity: string, weather: WeatherData): boolean {
    switch (activity.toLowerCase()) {
      case 'hiking':
      case 'leo n√∫i':
        return weather.condition !== 'rainy' && 
               weather.condition !== 'stormy' && 
               weather.temperature < 35;
      
      case 'cable car':
      case 'c√°p treo':
        return weather.condition !== 'stormy' && 
               weather.visibility > 2;
      
      case 'photography':
      case 'ch·ª•p ·∫£nh':
        return weather.condition !== 'stormy';
      
      case 'temple visit':
      case 'tham quan ch√πa':
        return weather.condition !== 'stormy';
      
      default:
        return weather.condition !== 'stormy';
    }
  }

  private generateMockWeather(): WeatherData {
    // Generate realistic weather data for Ba Den Mountain area
    const conditions: WeatherData['condition'][] = ['sunny', 'cloudy', 'rainy'];
    const condition = conditions[Math.floor(Math.random() * conditions.length)];
    
    let temperature = 25 + Math.random() * 10; // 25-35¬∞C
    let humidity = 60 + Math.random() * 30; // 60-90%
    let visibility = 5 + Math.random() * 10; // 5-15km
    
    // Adjust based on condition
    if (condition === 'rainy') {
      temperature -= 3;
      humidity += 10;
      visibility -= 3;
    } else if (condition === 'cloudy') {
      temperature -= 1;
      humidity += 5;
      visibility -= 1;
    }

    return {
      temperature: Math.round(temperature),
      humidity: Math.round(Math.min(100, humidity)),
      description: this.getWeatherDescription(condition),
      icon: this.getWeatherIcon(condition),
      windSpeed: Math.round(5 + Math.random() * 15), // 5-20 km/h
      visibility: Math.round(Math.max(1, visibility)),
      uvIndex: condition === 'sunny' ? Math.round(6 + Math.random() * 5) : Math.round(2 + Math.random() * 4),
      condition,
      timestamp: Date.now()
    };
  }

  private getWeatherDescription(condition: WeatherData['condition']): string {
    const descriptions: Record<WeatherData['condition'], string> = {
      sunny: 'Tr·ªùi n·∫Øng ƒë·∫πp',
      cloudy: 'Tr·ªùi nhi·ªÅu m√¢y',
      rainy: 'C√≥ m∆∞a',
      stormy: 'C√≥ b√£o',
      foggy: 'C√≥ s∆∞∆°ng m√π'
    };
    return descriptions[condition];
  }
}

// Export singleton instance
export const weatherService = new WeatherService();
export default weatherService;